describe('Browser WebSocket Client', function () {
  const EC = protractor.ExpectedConditions
  const EXTENSION_ID = 'bekcoofjhbhgplgbiemoeopghmholjel'
  const KEY_BACKSPACE = protractor.Key.BACK_SPACE
  const KEY_CTRL = protractor.Key.CONTROL
  const KEY_ENTER = protractor.Key.ENTER
  const SLEEP = 500
  const WAIT = 5000
  const echoServer = 'ws://demos.kaazing.com/echo'
  const element = protractor.element
  const messageInvalid = '"missingLeadingBracket": true}'
  const message1 = '{"Message 1":{"null":null,"number":42,"string":"is the answer to everything","boolean":false}}'
  const message2 = '{"Message 2":{"null":null,"number":42,"string":"is the answer to everything","boolean":false}}'
  const message3 = '{"Message 3":{"null":null,"number":42,"string":"is the answer to everything","boolean":false}}'
  const clearMessagesButton = element(by.id('clearMessagesButton'))
  const client = element(by.id('client'))
  const clientAnchor = element(by.id('clientAnchor'))
  const connectButton = element(by.id('connectButton'))
  const connectionStatus = element(by.id('connectionStatus'))
  const deleteModal = element(by.id('deleteModal'))
  const deleteModalBody = element(by.id('deleteModalBody'))
  const deleteModalCancelButton = element(by.id('deleteModalCancelButton'))
  const deleteModalDeleteButton = element(by.id('deleteModalDeleteButton'))
  const deleteModalName = element(by.id('deleteModalName'))
  const disconnectButton = element(by.id('disconnectButton'))
  const jsonModal = element(by.id('jsonModal'))
  const jsonModalBody = element(by.id('jsonModalBody'))
  const jsonModalCloseButton = element(by.id('jsonModalCloseButton'))
  const jsonModalTitle = element(by.id('jsonModalTitle'))
  const messageJsonInvalidWarning = element(by.id('messageJsonInvalidWarning'))
  const messages = element(by.id('messages'))
  const messageSelect = element(by.id('messageSelect'))
  const messageSendButton = element(by.id('messageSendButton'))
  const messageTextarea = element(by.id('messageTextarea'))
  const options = element(by.id('options'))
  const optionsAnchor = element(by.id('optionsAnchor'))
  const optionsMessageCancelEditButton = element(by.id('optionsMessageCancelEditButton'))
  const optionsMessageJsonInvalidWarning = element(by.id('optionsMessageJsonInvalidWarning'))
  const optionsMessageNameInput = element(by.id('optionsMessageNameInput'))
  const optionsMessageNameInputLabel = element(by.id('optionsMessageNameInputLabel'))
  const optionsMessageNameInvalid = element(by.id('optionsMessageNameInvalid'))
  const optionsMessageNoneSaved = element(by.id('optionsMessageNoneSaved'))
  const optionsMessageSaveButton = element(by.id('optionsMessageSaveButton'))
  const optionsMessageSavedTable = element(by.id('optionsMessageSavedTable'))
  const optionsMessageStatus = element(by.id('optionsMessageStatus'))
  const optionsMessageTextarea = element(by.id('optionsMessageTextarea'))
  const optionsMessageTextareaEmpty = element(by.id('optionsMessageTextareaEmpty'))
  const optionsProtocolCancelEditButton = element(by.id('#optionsProtocolCancelEditButton'))
  const optionsProtocolInput = element(by.id('#optionsProtocolInput'))
  const optionsProtocolInputEmpty = element(by.id('#optionsProtocolInputEmpty'))
  const optionsProtocolInputLabel = element(by.id('#optionsProtocolInputLabel'))
  const optionsProtocolNoneSaved = element(by.id('#optionsProtocolNoneSaved'))
  const optionsProtocolSaveButton = element(by.id('#optionsProtocolSaveButton'))
  const optionsProtocolSavedTable = element(by.id('#optionsProtocolSavedTable'))
  const optionsProtocolStatus = element(by.id('#optionsProtocolStatus'))
  const optionsUrlCancelEditButton = element(by.id('optionsUrlCancelEditButton'))
  const optionsUrlInput = element(by.id('optionsUrlInput'))
  const optionsUrlInputEmpty = element(by.id('optionsUrlInputEmpty'))
  const optionsUrlInputLabel = element(by.id('optionsUrlInputLabel'))
  const optionsUrlInvalidWarning = element(by.id('optionsUrlInvalidWarning'))
  const optionsUrlNoneSaved = element(by.id('optionsUrlNoneSaved'))
  const optionsUrlSaveButton = element(by.id('optionsUrlSaveButton'))
  const optionsUrlSavedTable = element(by.id('optionsUrlSavedTable'))
  const optionsUrlStatus = element(by.id('optionsUrlStatus'))
  const protocolInput = element(by.id('#protocolInput'))
  const protocolSelect = element(by.id('#protocolSelect'))
  const protocolSelectItems = element(by.id('#protocolSelectItems'))
  const urlInput = element(by.id('urlInput'))
  const urlSelect = element(by.id('urlSelect'))

  beforeEach(function () {
    browser.waitForAngularEnabled(false)
  })

  it('#options should be visible if "#options" is in URL', function () {
    browser.get(`chrome-extension://${EXTENSION_ID}/index.html#options`)
    browser.wait(EC.visibilityOf(options), WAIT)
    expect(options.isDisplayed()).toBe(true)
  })

  describe('default page status', function () {
    beforeEach(function () {
      browser.get(`chrome-extension://${EXTENSION_ID}/index.html`)
    })
    it('#client should be visible and #options should not be visible', function () {
      expect(client.isDisplayed()).toBe(true)
      expect(options.isDisplayed()).toBe(false)
    })
    it('Options click opens #options and hides #client and vice versa', function () {
      optionsAnchor.click()
      browser.wait(EC.invisibilityOf(client), WAIT)
      expect(client.isDisplayed()).toBe(false)
      expect(options.isDisplayed()).toBe(true)
      clientAnchor.click()
      browser.wait(EC.invisibilityOf(options), WAIT)
      expect(client.isDisplayed()).toBe(true)
      expect(options.isDisplayed()).toBe(false)
    })
  })

  it('default options settings', function () {
    browser.get(`chrome-extension://${EXTENSION_ID}/index.html`)
    optionsAnchor.click()
    browser.wait(EC.visibilityOf(options), WAIT)
    expect(optionsUrlInput.getAttribute('value')).toBe('')
    expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
    expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
    expect(optionsUrlInvalidWarning.isDisplayed()).toBe(false)
    expect(optionsUrlNoneSaved.isDisplayed()).toBe(true)
    expect(optionsUrlSavedTable.isDisplayed()).toBe(false)
    expect(optionsUrlStatus.isDisplayed()).toBe(false)
    expect(optionsUrlSaveButton.isEnabled()).toBe(false)
    expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(false)
    expect(optionsMessageNameInput.getAttribute('value')).toBe('')
    expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
    expect(optionsMessageNameInvalid.isDisplayed()).toBe(false)
    expect(optionsMessageNoneSaved.isDisplayed()).toBe(true)
    expect(optionsMessageSavedTable.isDisplayed()).toBe(false)
    expect(optionsMessageStatus.isDisplayed()).toBe(false)
    expect(optionsMessageTextarea.getAttribute('value')).toBe('')
    expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(false)
    expect(optionsMessageSaveButton.isEnabled()).toBe(false)
  })

  it('default client settings', function () {
    browser.get(`chrome-extension://${EXTENSION_ID}/index.html`)
    browser.wait(EC.visibilityOf(client), WAIT)
    expect(connectButton.isEnabled()).toBe(false)
    expect(connectionStatus.getText()).toBe('CLOSED')
    expect(disconnectButton.isDisplayed()).toBe(false)
    expect(messageJsonInvalidWarning.isDisplayed()).toBe(false)
    expect(messageTextarea.getAttribute('value')).toBe('')
    expect(messageSendButton.isEnabled()).toBe(false)
  })

  describe('URL options', function () {
    beforeEach(function () {
      browser.get(`chrome-extension://${EXTENSION_ID}/index.html`)
      optionsAnchor.click()
      browser.wait(EC.visibilityOf(optionsUrlInput), WAIT)
    })
    it('entering an invalid URL in #optionsUrlInput should show #optionsUrlInvalidWarning', function () {
      optionsUrlInput.clear().sendKeys('s://test')
      expect(optionsUrlInput.getAttribute('value')).toBe('s://test')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(true)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(true)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(false)
      expect(optionsUrlStatus.isDisplayed()).toBe(false)
      expect(optionsUrlSaveButton.isEnabled()).toBe(true)
    })
    it('entering and then deleting text in #optionsUrlInput should show #optionsUrlInputEmpty', function () {
      optionsUrlInput.clear().sendKeys('a', KEY_BACKSPACE)
      expect(optionsUrlInput.getAttribute('value')).toBe('')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(true)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(true)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(true)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(false)
      expect(optionsUrlStatus.isDisplayed()).toBe(false)
      expect(optionsUrlSaveButton.isEnabled()).toBe(false)
    })
    it('saving a URL adds it to #optionsUrlSavedTable', function () {
      optionsUrlInput.clear().sendKeys(echoServer)
      optionsUrlSaveButton.click()
      expect(optionsUrlInput.getAttribute('value')).toBe('')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with <code>ws://</code> or <code>wss://</code>:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(false)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(true)
      expect(optionsUrlStatus.isDisplayed()).toBe(true)
      expect(optionsUrlStatus.getText()).toBe('URL saved.')
      expect(optionsUrlSaveButton.isEnabled()).toBe(false)
    })

    it('clicking URL edit icon and then cancel button', function () {
      $('.editUrl').click()
      expect(optionsUrlInputLabel.getText()).toBe(`Editing URL: ${echoServer}`)
      expect(optionsUrlInput.getAttribute('value')).toBe(echoServer)
      optionsUrlCancelEditButton.click()
      browser.sleep(SLEEP)
      expect(optionsUrlInput.getAttribute('value')).toBe('')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with <code>ws://</code> or <code>wss://</code>:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(false)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(true)
      expect(optionsUrlStatus.isDisplayed()).toBe(false)
      expect(optionsUrlSaveButton.isEnabled()).toBe(false)
    })
    it('clicking URL edit icon and then save button', function () {
      $('.editUrl').click()
      expect(optionsUrlInputLabel.getText()).toBe(`Editing URL: ${echoServer}`)
      expect(optionsUrlInput.getAttribute('value')).toBe(echoServer)
      optionsUrlInput.sendKeys('/test').then(function () {
        optionsUrlSaveButton.click().then(function () {
          browser.sleep(SLEEP)
          expect(optionsUrlInput.getAttribute('value')).toBe('')
          expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with <code>ws://</code> or <code>wss://</code>:')
          expect(optionsUrlStatus.getText()).toBe('URL saved.')
          expect($('.bwc-table-row').getText()).toBe(`${echoServer}/test`)
          expect(optionsUrlInput.getAttribute('value')).toBe('')
          expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
          expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with <code>ws://</code> or <code>wss://</code>:')
          expect(optionsUrlInvalidWarning.isDisplayed()).toBe(false)
          expect(optionsUrlNoneSaved.isDisplayed()).toBe(false)
          expect(optionsUrlSavedTable.isDisplayed()).toBe(true)
          expect(optionsUrlStatus.isDisplayed()).toBe(true)
          expect(optionsUrlSaveButton.isEnabled()).toBe(false)
        })
      })
    })
    it('clicking URL delete icon and then cancel button', function () {
      $('.deleteUrl').click()
      browser.wait(EC.visibilityOf(deleteModalCancelButton), WAIT)
      browser.sleep(SLEEP)
      deleteModalCancelButton.click()
      browser.wait(EC.invisibilityOf(deleteModal), WAIT)
      expect(deleteModal.isDisplayed()).toBe(false)
      expect(optionsUrlInput.getAttribute('value')).toBe('')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(false)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(true)
      expect(optionsUrlStatus.isDisplayed()).toBe(false)
      expect(optionsUrlSaveButton.isEnabled()).toBe(false)
    })
    it('clicking URL delete icon and then delete button', function () {
      const url = `${echoServer}/test`
      $('.deleteUrl').click()
      browser.wait(EC.elementToBeClickable(deleteModalDeleteButton), WAIT)
      expect(deleteModalBody.getText()).toBe('Are you sure you want to delete the URL shown below?')
      expect(deleteModalName.getText()).toBe(url)
      expect(deleteModalDeleteButton.getText()).toBe('Delete!')
      expect(deleteModalCancelButton.getText()).toBe('Cancel')
      deleteModalDeleteButton.click()
      browser.wait(EC.elementToBeClickable(deleteModalCancelButton), WAIT)
      expect(deleteModalBody.getText()).toBe('URL deleted:')
      expect(deleteModalName.getText()).toBe(url)
      expect(deleteModalDeleteButton.isDisplayed()).toBe(false)
      expect(deleteModalCancelButton.getText()).toBe('Close')
      deleteModalCancelButton.click()
      browser.wait(EC.invisibilityOf(deleteModal), WAIT)
      expect(deleteModal.isDisplayed()).toBe(false)
      expect(optionsUrlNoneSaved.getText()).toBe('You have not saved any URLs.')
    })
    it('add three URLs for client tests', function () {
      optionsUrlInput.clear().sendKeys(echoServer)
      optionsUrlSaveButton.click()
      browser.sleep(SLEEP)
      optionsUrlInput.clear().sendKeys(`${echoServer}/test1`)
      optionsUrlSaveButton.click()
      browser.sleep(SLEEP)
      optionsUrlInput.clear().sendKeys(`${echoServer}/test2`)
      optionsUrlSaveButton.click()
      browser.sleep(SLEEP)
      expect(optionsUrlSavedTable.all(by.className('editUrl')).count()).toBe(3)
    })
  })

  // TODO
  xdescribe('Protocol options', function () {
    beforeEach(function () {
      browser.get(`chrome-extension://${EXTENSION_ID}/index.html`)
      optionsAnchor.click()
      browser.wait(EC.visibilityOf(optionsUrlInput), WAIT)
    })
    it('entering an invalid URL in #optionsUrlInput should show #optionsUrlInvalidWarning', function () {
      optionsUrlInput.clear().sendKeys('s://test')
      expect(optionsUrlInput.getAttribute('value')).toBe('s://test')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(true)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(true)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(false)
      expect(optionsUrlStatus.isDisplayed()).toBe(false)
      expect(optionsUrlSaveButton.isEnabled()).toBe(true)
    })
    it('entering and then deleting text in #optionsUrlInput should show #optionsUrlInputEmpty', function () {
      optionsUrlInput.clear().sendKeys('a', KEY_BACKSPACE)
      expect(optionsUrlInput.getAttribute('value')).toBe('')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(true)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(true)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(true)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(false)
      expect(optionsUrlStatus.isDisplayed()).toBe(false)
      expect(optionsUrlSaveButton.isEnabled()).toBe(false)
    })
    it('saving a URL adds it to #optionsUrlSavedTable', function () {
      optionsUrlInput.clear().sendKeys(echoServer)
      optionsUrlSaveButton.click()
      expect(optionsUrlInput.getAttribute('value')).toBe('')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(false)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(true)
      expect(optionsUrlStatus.isDisplayed()).toBe(true)
      expect(optionsUrlStatus.getText()).toBe('URL saved.')
      expect(optionsUrlSaveButton.isEnabled()).toBe(false)
    })

    it('clicking URL edit icon and then cancel button', function () {
      $('.editUrl').click()
      expect(optionsUrlInputLabel.getText()).toBe(`Editing URL: ${echoServer}`)
      expect(optionsUrlInput.getAttribute('value')).toBe(echoServer)
      optionsUrlCancelEditButton.click()
      browser.sleep(SLEEP)
      expect(optionsUrlInput.getAttribute('value')).toBe('')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(false)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(true)
      expect(optionsUrlStatus.isDisplayed()).toBe(false)
      expect(optionsUrlSaveButton.isEnabled()).toBe(false)
    })
    it('clicking URL edit icon and then save button', function () {
      $('.editUrl').click()
      expect(optionsUrlInputLabel.getText()).toBe(`Editing URL: ${echoServer}`)
      expect(optionsUrlInput.getAttribute('value')).toBe(echoServer)
      optionsUrlInput.sendKeys('/test').then(function () {
        optionsUrlSaveButton.click().then(function () {
          browser.sleep(SLEEP)
          expect(optionsUrlInput.getAttribute('value')).toBe('')
          expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
          expect(optionsUrlStatus.getText()).toBe('URL saved.')
          expect($('.bwc-table-row').getText()).toBe(`${echoServer}/test`)
          expect(optionsUrlInput.getAttribute('value')).toBe('')
          expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
          expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
          expect(optionsUrlInvalidWarning.isDisplayed()).toBe(false)
          expect(optionsUrlNoneSaved.isDisplayed()).toBe(false)
          expect(optionsUrlSavedTable.isDisplayed()).toBe(true)
          expect(optionsUrlStatus.isDisplayed()).toBe(true)
          expect(optionsUrlSaveButton.isEnabled()).toBe(false)
        })
      })
    })
    it('clicking URL delete icon and then cancel button', function () {
      $('.deleteUrl').click()
      browser.wait(EC.visibilityOf(deleteModalCancelButton), WAIT)
      browser.sleep(SLEEP)
      deleteModalCancelButton.click()
      browser.wait(EC.invisibilityOf(deleteModal), WAIT)
      expect(deleteModal.isDisplayed()).toBe(false)
      expect(optionsUrlInput.getAttribute('value')).toBe('')
      expect(optionsUrlInputEmpty.isDisplayed()).toBe(false)
      expect(optionsUrlInputLabel.getText()).toBe('The URL should begin with ws:// or wss://:')
      expect(optionsUrlInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsUrlNoneSaved.isDisplayed()).toBe(false)
      expect(optionsUrlSavedTable.isDisplayed()).toBe(true)
      expect(optionsUrlStatus.isDisplayed()).toBe(false)
      expect(optionsUrlSaveButton.isEnabled()).toBe(false)
    })
    it('clicking URL delete icon and then delete button', function () {
      const url = `${echoServer}/test`
      $('.deleteUrl').click()
      browser.wait(EC.elementToBeClickable(deleteModalDeleteButton), WAIT)
      expect(deleteModalBody.getText()).toBe('Are you sure you want to delete the URL shown below?')
      expect(deleteModalName.getText()).toBe(url)
      expect(deleteModalDeleteButton.getText()).toBe('Delete!')
      expect(deleteModalCancelButton.getText()).toBe('Cancel')
      deleteModalDeleteButton.click()
      browser.wait(EC.elementToBeClickable(deleteModalCancelButton), WAIT)
      expect(deleteModalBody.getText()).toBe('URL deleted:')
      expect(deleteModalName.getText()).toBe(url)
      expect(deleteModalDeleteButton.isDisplayed()).toBe(false)
      expect(deleteModalCancelButton.getText()).toBe('Close')
      deleteModalCancelButton.click()
      browser.wait(EC.invisibilityOf(deleteModal), WAIT)
      expect(deleteModal.isDisplayed()).toBe(false)
      expect(optionsUrlNoneSaved.getText()).toBe('You have not saved any URLs.')
    })
    it('add three URLs for client tests', function () {
      optionsUrlInput.clear().sendKeys(echoServer)
      optionsUrlSaveButton.click()
      browser.sleep(SLEEP)
      optionsUrlInput.clear().sendKeys(`${echoServer}/test1`)
      optionsUrlSaveButton.click()
      browser.sleep(SLEEP)
      optionsUrlInput.clear().sendKeys(`${echoServer}/test2`)
      optionsUrlSaveButton.click()
      browser.sleep(SLEEP)
      expect(optionsUrlSavedTable.all(by.className('editUrl')).count()).toBe(3)
    })
  })

  describe('message options', function () {
    beforeEach(function () {
      browser.get(`chrome-extension://${EXTENSION_ID}/index.html`)
      optionsAnchor.click()
      browser.wait(EC.visibilityOf(optionsUrlInput), WAIT)
      browser.executeScript('arguments[0].scrollIntoView();', optionsMessageSaveButton)
    })
    it('entering and then deleting text in #optionsMessageNameInput should show #optionsMessageNameInvalid', function () {
      optionsMessageNameInput.clear().sendKeys('a', KEY_BACKSPACE)
      expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsMessageNameInput.getAttribute('value')).toBe('')
      expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
      expect(optionsMessageNameInvalid.isDisplayed()).toBe(true)
      expect(optionsMessageNoneSaved.isDisplayed()).toBe(true)
      expect(optionsMessageSavedTable.isDisplayed()).toBe(false)
      expect(optionsMessageStatus.isDisplayed()).toBe(false)
      expect(optionsMessageTextarea.getAttribute('value')).toBe('')
      expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(false)
      expect(optionsMessageSaveButton.isEnabled()).toBe(false)
    })
    it('entering a message with invalid JSON in #optionsMessageTextarea should show #optionsMessageJsonInvalidWarning', function () {
      optionsMessageTextarea.clear().sendKeys(messageInvalid)
      expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(true)
      expect(optionsMessageNameInput.getAttribute('value')).toBe('')
      expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
      expect(optionsMessageNameInvalid.isDisplayed()).toBe(false)
      expect(optionsMessageNoneSaved.isDisplayed()).toBe(true)
      expect(optionsMessageSavedTable.isDisplayed()).toBe(false)
      expect(optionsMessageStatus.isDisplayed()).toBe(false)
      expect(optionsMessageTextarea.getAttribute('value')).toBe('"missingLeadingBracket": true}')
      expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(false)
      expect(optionsMessageSaveButton.isEnabled()).toBe(false)
    })
    it('entering and then deleting text in #optionsMessageTextarea should show #optionsMessageTextareaEmpty', function () {
      optionsMessageTextarea.clear().sendKeys('a', KEY_BACKSPACE)
      expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(true)
      expect(optionsMessageNameInput.getAttribute('value')).toBe('')
      expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
      expect(optionsMessageNameInvalid.isDisplayed()).toBe(false)
      expect(optionsMessageNoneSaved.isDisplayed()).toBe(true)
      expect(optionsMessageSavedTable.isDisplayed()).toBe(false)
      expect(optionsMessageStatus.isDisplayed()).toBe(false)
      expect(optionsMessageTextarea.getAttribute('value')).toBe('')
      expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(true)
      expect(optionsMessageSaveButton.isEnabled()).toBe(false)
    })
    it('saving a message adds it to #optionsMessageSavedTable', function () {
      optionsMessageNameInput.clear().sendKeys('Echo One')
      optionsMessageTextarea.clear().sendKeys(message1)
      optionsMessageSaveButton.click()
      expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsMessageNameInput.getAttribute('value')).toBe('')
      expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
      expect(optionsMessageNameInvalid.isDisplayed()).toBe(false)
      expect(optionsMessageNoneSaved.isDisplayed()).toBe(false)
      expect(optionsMessageSavedTable.isDisplayed()).toBe(true)
      expect(optionsMessageStatus.isDisplayed()).toBe(true)
      expect(optionsMessageStatus.getText()).toBe('Message saved.')
      expect(optionsMessageTextarea.getAttribute('value')).toBe('')
      expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(false)
      expect(optionsMessageSaveButton.isEnabled()).toBe(false)
    })
    it('clicking printer icon should show JSON modal', function () {
      browser.sleep(SLEEP)
      $('.printMessage').click()
      browser.wait(EC.visibilityOf(jsonModal), WAIT)
      expect(jsonModalTitle.getText()).toBe('Echo One')
      expect(jsonModalBody.all(by.className('bwc-key')).count()).toBe(5)
      expect(jsonModalBody.all(by.className('bwc-null')).count()).toBe(1)
      expect(jsonModalBody.all(by.className('bwc-number')).count()).toBe(1)
      expect(jsonModalBody.all(by.className('bwc-string')).count()).toBe(1)
      expect(jsonModalBody.all(by.className('bwc-boolean')).count()).toBe(1)
      browser.wait(EC.elementToBeClickable(jsonModalCloseButton), WAIT)
      browser.sleep(SLEEP)
      jsonModalCloseButton.click()
      browser.wait(EC.invisibilityOf(jsonModal), WAIT)
      expect(jsonModal.isDisplayed()).toBe(false)
      expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsMessageNameInput.getAttribute('value')).toBe('')
      expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
      expect(optionsMessageNameInvalid.isDisplayed()).toBe(false)
      expect(optionsMessageNoneSaved.isDisplayed()).toBe(false)
      expect(optionsMessageSavedTable.isDisplayed()).toBe(true)
      expect(optionsMessageStatus.isDisplayed()).toBe(false)
      expect(optionsMessageTextarea.getAttribute('value')).toBe('')
      expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(false)
      expect(optionsMessageSaveButton.isEnabled()).toBe(false)
    })
    it('clicking edit icon and then cancel button', function () {
      browser.sleep(SLEEP)
      $('.editMessage').click()
      expect(optionsMessageNameInputLabel.getText()).toBe('Editing message: Echo One')
      expect(optionsMessageNameInput.getAttribute('value')).toBe('Echo One')
      expect(optionsMessageTextarea.getAttribute('value')).toBe(message1)
      optionsMessageCancelEditButton.click()
      expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsMessageNameInput.getAttribute('value')).toBe('')
      expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
      expect(optionsMessageNameInvalid.isDisplayed()).toBe(false)
      expect(optionsMessageNoneSaved.isDisplayed()).toBe(false)
      expect(optionsMessageSavedTable.isDisplayed()).toBe(true)
      expect(optionsMessageStatus.isDisplayed()).toBe(false)
      expect(optionsMessageTextarea.getAttribute('value')).toBe('')
      expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(false)
      expect(optionsMessageSaveButton.isEnabled()).toBe(false)
    })
    it('clicking edit icon and then save button', function () {
      browser.sleep(SLEEP)
      $('.editMessage').click()
      optionsMessageNameInput.sendKeys(' Test').then(function () {
        optionsMessageSaveButton.click().then(function () {
          browser.sleep(SLEEP)
          expect(optionsMessageSavedTable.all(by.className('bwc-table-row')).get(0).getText()).toBe('Echo One Test')
          expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(false)
          expect(optionsMessageNameInput.getAttribute('value')).toBe('')
          expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
          expect(optionsMessageNameInvalid.isDisplayed()).toBe(false)
          expect(optionsMessageNoneSaved.isDisplayed()).toBe(false)
          expect(optionsMessageSavedTable.isDisplayed()).toBe(true)
          expect(optionsMessageStatus.isDisplayed()).toBe(true)
          expect(optionsMessageStatus.getText()).toBe('Message saved.')
          expect(optionsMessageTextarea.getAttribute('value')).toBe('')
          expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(false)
          expect(optionsMessageSaveButton.isEnabled()).toBe(false)
        })
      })
    })
    it('clicking delete icon and then cancel button', function () {
      browser.sleep(SLEEP)
      $('.deleteMessage').click()
      browser.wait(EC.visibilityOf(deleteModalCancelButton), WAIT)
      browser.sleep(SLEEP)
      deleteModalCancelButton.click()
      browser.wait(EC.invisibilityOf(deleteModal), WAIT)
      expect(deleteModal.isDisplayed()).toBe(false)
      expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsMessageNameInput.getAttribute('value')).toBe('')
      expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
      expect(optionsMessageNameInvalid.isDisplayed()).toBe(false)
      expect(optionsMessageNoneSaved.isDisplayed()).toBe(false)
      expect(optionsMessageSavedTable.isDisplayed()).toBe(true)
      expect(optionsMessageStatus.isDisplayed()).toBe(false)
      expect(optionsMessageTextarea.getAttribute('value')).toBe('')
      expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(false)
      expect(optionsMessageSaveButton.isEnabled()).toBe(false)
    })
    it('clicking delete icon and then delete button', function () {
      browser.sleep(SLEEP)
      $('.deleteMessage').click()
      browser.wait(EC.visibilityOf(deleteModalCancelButton), WAIT)
      browser.wait(EC.elementToBeClickable(deleteModalDeleteButton), WAIT)
      expect(deleteModalBody.getText()).toBe('Are you sure you want to delete the message shown below?')
      expect(deleteModalName.getText()).toBe('Echo One Test')
      expect(deleteModalDeleteButton.getText()).toBe('Delete!')
      expect(deleteModalCancelButton.getText()).toBe('Cancel')
      deleteModalDeleteButton.click()
      browser.sleep(SLEEP)
      expect(deleteModalBody.getText()).toBe('Message deleted:')
      expect(deleteModalName.getText()).toBe('Echo One Test')
      expect(deleteModalDeleteButton.isDisplayed()).toBe(false)
      expect(deleteModalCancelButton.getText()).toBe('Close')
      deleteModalCancelButton.click()
      browser.wait(EC.invisibilityOf(deleteModal), WAIT)
      expect(deleteModal.isDisplayed()).toBe(false)
      expect(optionsMessageNoneSaved.getText()).toBe('You have not saved any messages.')
      expect(optionsMessageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(optionsMessageNameInput.getAttribute('value')).toBe('')
      expect(optionsMessageNameInputLabel.getText()).toBe('The display name appears in the "Saved Messages" table and client drop-down menu:')
      expect(optionsMessageNameInvalid.isDisplayed()).toBe(false)
      expect(optionsMessageNoneSaved.isDisplayed()).toBe(true)
      expect(optionsMessageSavedTable.isDisplayed()).toBe(false)
      expect(optionsMessageStatus.isDisplayed()).toBe(false)
      expect(optionsMessageTextarea.getAttribute('value')).toBe('')
      expect(optionsMessageTextareaEmpty.isDisplayed()).toBe(false)
      expect(optionsMessageSaveButton.isEnabled()).toBe(false)
    })
    it('add three messages for client tests', function () {
      optionsMessageNameInput.clear().sendKeys('One')
      optionsMessageTextarea.clear().sendKeys(message1)
      optionsMessageSaveButton.click()
      browser.sleep(SLEEP)
      optionsMessageNameInput.clear().sendKeys('Two')
      optionsMessageTextarea.clear().sendKeys(message2)
      optionsMessageSaveButton.click()
      browser.sleep(SLEEP)
      optionsMessageNameInput.clear().sendKeys('Three')
      optionsMessageTextarea.clear().sendKeys(message3)
      optionsMessageSaveButton.click()
      browser.sleep(SLEEP)
      expect(optionsMessageSavedTable.all(by.className('editMessage')).count()).toBe(3)
    })
  })

  describe('client input tests', function () {
    beforeEach(function () {
      browser.get(`chrome-extension://${EXTENSION_ID}/index.html`)
    })
    it('verify defaults', function () {
      expect(urlSelect.getText()).toBe('Saved URLs')
      // TODO ws://demos.kaazing.com/echo\nws://demos.kaazing.com/echo/test1\nws://demos.kaazing.com/echo/test2')
      expect(urlInput.getAttribute('value')).toBe('')
      // TODO expect(protocolSelect.getText()).toBe('Saved Protocols')
      expect(connectionStatus.getText()).toBe('CLOSED')
      expect(connectButton.isEnabled()).toBe(false)
      expect(disconnectButton.isDisplayed()).toBe(false)
      expect(messageSelect.getText()).toBe('Saved Messages')
      // TODO One\nThree\nTwo')
      expect(messageTextarea.getAttribute('value')).toBe('')
      expect(messageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(messageSendButton.isEnabled()).toBe(false)
      expect(clearMessagesButton.isEnabled()).toBe(false)
      expect(messages.getText()).toBe('')
    })
    it('choosing saved connection should set #urlInput', function () {
      const url = 'ws://demos.kaazing.com/echo/test1'
      element(by.id('urlSelectMenu')).click()
      element(by.buttonText(url)).click()
      expect(urlInput.getAttribute('value')).toBe(url)
      expect(connectionStatus.getText()).toBe('CLOSED')
      expect(connectButton.isEnabled()).toBe(true)
      expect(disconnectButton.isDisplayed()).toBe(false)
      expect(messageSelect.getText()).toBe('Saved Messages')
      // TODO One\nThree\nTwo')
      expect(messageTextarea.getAttribute('value')).toBe('')
      expect(messageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(messageSendButton.isEnabled()).toBe(false)
      expect(clearMessagesButton.isEnabled()).toBe(false)
      expect(messages.getText()).toBe('')
    })
    it('choosing saved message should set #messageTextarea', function () {
      element(by.id('messageSelectMenu')).click()
      element(by.buttonText('Three')).click()
      expect(messageTextarea.getAttribute('value')).toBe(message3)
      expect(connectionStatus.getText()).toBe('CLOSED')
      expect(connectButton.isEnabled()).toBe(false)
      expect(disconnectButton.isDisplayed()).toBe(false)
      expect(messageSelect.getText()).toBe('Saved Messages')
      // TODO One\nThree\nTwo')
      expect(messageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(messageSendButton.isEnabled()).toBe(false)
      expect(clearMessagesButton.isEnabled()).toBe(false)
      expect(messages.getText()).toBe('')
    })
    it('entering invalid JSON in #messageTextarea should show #messageJsonInvalidWarning', function () {
      messageTextarea.clear().sendKeys(messageInvalid)
      expect(messageJsonInvalidWarning.isDisplayed()).toBe(true)
      messageTextarea.clear().sendKeys(message1)
      expect(connectionStatus.getText()).toBe('CLOSED')
      expect(connectButton.isEnabled()).toBe(false)
      expect(disconnectButton.isDisplayed()).toBe(false)
      expect(messageSelect.getText()).toBe('Saved Messages')
      // TODO One\nThree\nTwo')
      expect(messageTextarea.getAttribute('value')).toBe(message1)
      expect(messageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(messageSendButton.isEnabled()).toBe(false)
      expect(clearMessagesButton.isEnabled()).toBe(false)
      expect(messages.getText()).toBe('')
    })
  })

  describe('client connection tests', function () {
    beforeEach(function () {
      browser.get(`chrome-extension://${EXTENSION_ID}/index.html`)
    })
    it('connect to echoServer and then disconnect', function () {
      urlInput.clear().sendKeys(echoServer)
      connectButton.click()
      browser.wait(EC.textToBePresentInElement(connectionStatus, 'OPENED'), WAIT)
      expect(connectionStatus.getText()).toBe('OPENED')
      expect(connectButton.isDisplayed()).toBe(false)
      expect(disconnectButton.isDisplayed()).toBe(true)
      expect(messageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(messageSendButton.isEnabled()).toBe(false)
      expect(clearMessagesButton.isEnabled()).toBe(false)
      expect(messages.getText()).toBe('')
      disconnectButton.click()
      browser.wait(EC.textToBePresentInElement(connectionStatus, 'CLOSED'), WAIT)
      expect(connectionStatus.getText()).toBe('CLOSED')
      expect(connectButton.isDisplayed()).toBe(true)
      expect(connectButton.isEnabled()).toBe(true)
      expect(disconnectButton.isDisplayed()).toBe(false)
      expect(messageJsonInvalidWarning.isDisplayed()).toBe(false)
      expect(messageSendButton.isEnabled()).toBe(false)
      expect(clearMessagesButton.isEnabled()).toBe(false)
      expect(messages.getText()).toBe('')
    })
    it('send message using send button and open with JSON modal', function () {
      const receivedMessage = $('.bwc-received')
      urlInput.clear().sendKeys(echoServer)
      connectButton.click()
      browser.wait(EC.textToBePresentInElement(connectionStatus, 'OPENED'), WAIT)
      messageTextarea.clear().sendKeys(message1)
      messageSendButton.click()
      browser.wait(EC.textToBePresentInElement(receivedMessage, message1), WAIT)
      expect($('.bwc-sent').getText()).toBe(message1)
      expect(true).toBe(true)
      receivedMessage.click()
      browser.sleep(SLEEP)
      expect(jsonModal.isDisplayed()).toBe(true)
      expect(jsonModalTitle.getText()).toBe('Incoming Message')
      expect(jsonModalBody.getText()).toContain('Message 1')
    })
    it('send two messages with Ctrl + Enter, open and close each with JSON modal, clear messages', function () {
      const ctrlEnter = protractor.Key.chord(KEY_CTRL, KEY_ENTER)
      const receivedMessages = element.all(by.css('.bwc-received'))
      urlInput.clear().sendKeys(echoServer)
      connectButton.click()
      browser.wait(EC.textToBePresentInElement(connectionStatus, 'OPENED'), WAIT)
      messageTextarea.clear().sendKeys(message1, ctrlEnter)
      browser.wait(EC.textToBePresentInElement(receivedMessages.get(0), message1), WAIT)
      messageTextarea.clear().sendKeys(message2, ctrlEnter)
      browser.wait(EC.textToBePresentInElement(receivedMessages.get(1), message2), WAIT)
      receivedMessages.get(0).click()
      browser.sleep(SLEEP)
      expect(jsonModal.isDisplayed()).toBe(true)
      expect(jsonModalTitle.getText()).toBe('Incoming Message')
      expect(jsonModalBody.getText()).toContain('Message 1')
      jsonModalCloseButton.click()
      browser.sleep(SLEEP)
      expect(jsonModal.isDisplayed()).toBe(false)
      receivedMessages.get(1).click()
      browser.sleep(SLEEP)
      expect(jsonModal.isDisplayed()).toBe(true)
      expect(jsonModalTitle.getText()).toBe('Incoming Message')
      expect(jsonModalBody.getText()).toContain('Message 2')
      jsonModalCloseButton.click()
      browser.sleep(SLEEP)
      expect(jsonModal.isDisplayed()).toBe(false)
      clearMessagesButton.click()
      expect(messages.getText()).toBe('')
    })
  })
})
